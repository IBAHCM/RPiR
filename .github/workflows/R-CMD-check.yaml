# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    # If the commit message isn't [skip ci]
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2.3.1
        with:
          persist-credentials: false

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

# Build and deploy DOCS -----------------------------------------------------

      # Build documentation with pkgdown
      - name: Build Docs
        if: runner.os == 'Linux'
        run: |
          install.packages("rsconnect")
          install.packages("pkgdown")
          pkgdown::build_site()
        shell: Rscript {0}

      # Move ioslide lectures to docs
      - name: Move ioslide lectures to docs
        if: runner.os == 'Linux'
        run: |
          install.packages("rmarkdown")
          all_files <- dir(file.path("inst", "lectures"), recursive = TRUE, full.names = TRUE)
          rmd_files <- all_files[grep(".Rmd", all_files)]
          for (i in seq_len(length(rmd_files))) {
          out_file <- rmarkdown::render(rmd_files[i], output_format = "html_document")
          html_file <- gsub("Rmd", "html", rmd_files[i])
          file.copy(out_file, file.path("docs", "lectures",
          basename(html_file)), overwrite = TRUE)
          }
        shell: Rscript {0}

      - name: Add credentials in keychain
        if: runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.RPIR_DOCS }}
        run: |
          echo "\
          protocol=https
          host=github.com
          username=Personal Access Token
          password=$GITHUB_TOKEN" | git credential-osxkeychain store

      # Create a build_docs branch and commit to it
      - name: Commit to build_docs branch
        if: runner.os == 'Linux'
        run: |
          git checkout -b build_docs
          git add .
          git commit -m '[skip ci]'
        shell: bash

      # Deploy the docs using JamesIves/github-pages-deploy-action
      - name: Deploy Docs
        if: runner.os == 'Linux'
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.RPIR_DOCS }}
          BASE_BRANCH: build_docs
          BRANCH: master # The branch the action should deploy to.
          FOLDER: docs # The folder the action should deploy.
          TARGET_FOLDER: docs
          COMMIT_MESSAGE: 'build docs [skip ci]'
